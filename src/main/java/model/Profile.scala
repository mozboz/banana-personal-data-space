//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2014.06.27 at 05:21:07 PM CEST
//
package model

import java.util.ArrayList
import java.util.List
import javax.xml.bind.annotation.XmlAccessType
import javax.xml.bind.annotation.XmlAccessorType
import javax.xml.bind.annotation.XmlType
import collection.mutable
import collection.immutable.HashMap

class Profile(name: String) {

  /**
   * Get all contexts
   * @return
   */
  def getContexts: Map[String, Context] = {
    if (contexts == null) {
      contexts = new mutable.HashMap[String, Context]
    }
    return this.contexts
  }

  /**
   * Get one context by name
   * @return
   */
  def getContextMetaData(name: String): ContextMetaData = {
    /*
    if (!contexts.contains(name)) {
      throw new Exception("context name " + name + " not found")
    }

    this.contexts(n ame)
    */
  }

  def createContext(name: String): Context = {
    val c: Context = new Context(name)
    contexts.put(name, c)
  }

  def saveToJson(fileName: String) {
  }

  def loadFromJson(fileName: String) {
  }

  def addContextItem(context: String, itemName: String, itemValue: String) {
    checkContextExists(context)
    contexts(context).setDataItem(itemName, itemValue)
  }

  def getContextItem(context: String, itemName: String) {
    checkContextExists(context)
    contexts(context).getDataItem(itemName)
  }

  def checkContextExists(contextName: String) = {
    if (!contexts.contains(contextName)) {
      throw new Exception("Context " + contextName + " does not exist")
    }
  }

  protected var contexts: mutable.HashMap[String, Context] = new HashMap[String, Context]()
}