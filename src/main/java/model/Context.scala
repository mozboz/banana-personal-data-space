//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2014.06.27 at 05:21:07 PM CEST
//
package model

import java.util.ArrayList
import java.util.List
import javax.xml.bind.annotation._
import collection.mutable

/**
 * <p>Java class for context complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="context">
 * &lt;complexContent>
 * &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 * &lt;sequence>
 * &lt;element name="aggregates" type="{http://www.w3.org/2001/XMLSchema}anyURI" maxOccurs="unbounded" minOccurs="0"/>
 * &lt;element name="contains" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 * &lt;element name="contained_in" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 * &lt;element name="data" type="{}data" minOccurs="0"/>
 * &lt;/sequence>
 * &lt;/restriction>
 * &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "context", propOrder = Array("aggregatesProfiles", "referencesContexts", "referencedByContexts", "data")) class Context {

  def setDataItem(name: String, value: String) {
    data.put(name, value)
  }

  def getDataItem(name: String): String = {
    if (!data.contains(name)) {
      throw new Exception("Context data does not contain key " + name)
    }

    data.get(name)
  }

  def getAggregatedProfiles = {
    aggregatedProfiles
  }

  def getReferencedContexts = {
    referencedContexts
  }

  def getReferencedByContexts = {
    referencedByContexts
  }

  var aggregatedProfiles: mutable.HashSet[String]
  var referencedContexts: mutable.HashSet[String]
  var referencedByContexts: mutable.HashSet[String]
  var data: mutable.HashMap[String, String]

}